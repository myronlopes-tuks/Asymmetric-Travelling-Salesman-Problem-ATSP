The Best First Search

def bestfs(in Start, out State)
	open = [Start],
	close = [],
	State = failure;
	while (open <> []) AND (State <> success)
		begin
			remove the leftmost state from open, call it X;
			if X is the goal, then
				State = success
			else begin
				generate children of X;
				for each child of X do
					case:
						the child is not on open or closed:
						begin
							assign the child a heuristic value
							add the child to open
						end;

						the child is already on open:
							if the child was reached by a shorter path then
								give the state on open the shorter path
						
						the child is already on closed:
							if the child is reached by a shorter path then
								begin
									remove the state from closed,
									add the child to open
								end;
					endcase
				endfor
			put X on closed;
			re-order states on open by heuristic merit (best leftmost);
	endwhile;

	return State;
end.


-------------------------------------------------------------------------------------------------------
------------------------------------------------ Notes ------------------------------------------------
-------------------------------------------------------------------------------------------------------
H(n) - estimated/Guess distance between Node N to the END node
G(n) - the exact distance from Start Node to Node N   (Sum of Edge Distances)
F(n) = G(n) + H(n)


//Getting the G-score of node N
-   When do we determine/ want to calculate the G-score of a node?
    -   in order to get the G_score of a current node N



//Pseudo-Code from Brilliant.com
 make an openlist containing only the starting node
   make an empty closed list
   while (the destination node has not been reached):
       consider the node with the lowest f score in the open list
       if (this node is our destination node) :
           we are finished
       if not:
           put the current node in the closed list and look at all of its neighbors
           for (each neighbor of the current node):
               if (neighbor has lower g value than current and is in the closed list) :
                   replace the neighbor with the new, lower, g value
                   current node is now the neighbor's parent
               else if (current g value is lower and this neighbor is in the open list ) :
                   replace the neighbor with the new, lower, g value
                   change the neighbor's parent to our current node

               else if this neighbor is not in both lists:
                   add it to the open list and set its g



